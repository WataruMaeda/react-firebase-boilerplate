{"ast":null,"code":"export const tests = {\n  input: {\n    test: x => x && x.toString().replace(/\\s/g, '').length > 0,\n    error: 'Please enter a valid input'\n  },\n  number: {\n    test: /^\\d+$/,\n    error: 'Please enter number'\n  },\n  password: {\n    test: x => x && x.toString().replace(/\\s/g, '').length > 9,\n    error: 'Please enter a valid password'\n  },\n  email: {\n    test: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n    error: 'Please enter a valid email address'\n  },\n  name: {\n    test: /^[a-z]+([a-z- ',.-]?)+[a-z.]+$/i,\n    error: 'Please enter a valid name'\n  },\n  address: {\n    test: x => x && x.replace(/\\s/g, '').length > 1,\n    error: 'Please enter a valid address'\n  },\n  phone: {\n    test: /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/,\n    error: 'Please enter a valid phone number'\n  },\n  website: {\n    test: /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/,\n    error: 'Please enter a valid url'\n  }\n};\nexport const validate = (values, tests) => {\n  const errors = {};\n  let isError = false;\n  Object.keys(values).forEach(key => {\n    if (tests[key]) {\n      const _tests$key = tests[key],\n            test = _tests$key.test,\n            error = _tests$key.error,\n            _tests$key$options = _tests$key.options,\n            options = _tests$key$options === void 0 ? {} : _tests$key$options;\n\n      if (test && error) {\n        const res = typeof test === 'function' ? test(values[key]) : test.test(values[key]);\n        const skip = options.ifNotEmpty && !values[key].toString().length > 0;\n\n        if (!res && !skip) {\n          isError = true;\n          errors[key] = error;\n        }\n      }\n    }\n  });\n  return {\n    isError,\n    errors\n  };\n};","map":{"version":3,"sources":["/Users/wmaeda/Documents/me/Web/react-firebase-boilerplate/src/utils/vali.js"],"names":["tests","input","test","x","toString","replace","length","error","number","password","email","name","address","phone","website","validate","values","errors","isError","Object","keys","forEach","key","options","res","skip","ifNotEmpty"],"mappings":"AACA,OAAO,MAAMA,KAAK,GAAG;AACnBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAEC,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACC,QAAF,GAAaC,OAAb,CAAqB,KAArB,EAA4B,EAA5B,EAAgCC,MAAhC,GAAyC,CADpD;AAELC,IAAAA,KAAK,EAAE;AAFF,GADY;AAKnBC,EAAAA,MAAM,EAAE;AACNN,IAAAA,IAAI,EAAE,OADA;AAENK,IAAAA,KAAK,EAAE;AAFD,GALW;AASnBE,EAAAA,QAAQ,EAAE;AACRP,IAAAA,IAAI,EAAEC,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACC,QAAF,GAAaC,OAAb,CAAqB,KAArB,EAA4B,EAA5B,EAAgCC,MAAhC,GAAyC,CADjD;AAERC,IAAAA,KAAK,EAAE;AAFC,GATS;AAanBG,EAAAA,KAAK,EAAE;AACLR,IAAAA,IAAI,EAAE,sJADD;AAELK,IAAAA,KAAK,EAAE;AAFF,GAbY;AAiBnBI,EAAAA,IAAI,EAAE;AACJT,IAAAA,IAAI,EAAE,iCADF;AAEJK,IAAAA,KAAK,EAAE;AAFH,GAjBa;AAqBnBK,EAAAA,OAAO,EAAE;AACPV,IAAAA,IAAI,EAAEC,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACE,OAAF,CAAU,KAAV,EAAiB,EAAjB,EAAqBC,MAArB,GAA8B,CADvC;AAEPC,IAAAA,KAAK,EAAE;AAFA,GArBU;AAyBnBM,EAAAA,KAAK,EAAE;AACLX,IAAAA,IAAI,EAAE,oDADD;AAELK,IAAAA,KAAK,EAAE;AAFF,GAzBY;AA6BnBO,EAAAA,OAAO,EAAE;AACPZ,IAAAA,IAAI,EAAE,2FADC;AAEPK,IAAAA,KAAK,EAAE;AAFA;AA7BU,CAAd;AAmCP,OAAO,MAAMQ,QAAQ,GAAG,CAACC,MAAD,EAAShB,KAAT,KAAmB;AACzC,QAAMiB,MAAM,GAAG,EAAf;AACA,MAAIC,OAAO,GAAG,KAAd;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,OAApB,CAA6BC,GAAD,IAAS;AACnC,QAAItB,KAAK,CAACsB,GAAD,CAAT,EAAgB;AAAA,yBAKVtB,KAAK,CAACsB,GAAD,CALK;AAAA,YAEZpB,IAFY,cAEZA,IAFY;AAAA,YAGZK,KAHY,cAGZA,KAHY;AAAA,4CAIZgB,OAJY;AAAA,YAIZA,OAJY,mCAIF,EAJE;;AAMd,UAAIrB,IAAI,IAAIK,KAAZ,EAAmB;AACjB,cAAMiB,GAAG,GAAG,OAAOtB,IAAP,KAAgB,UAAhB,GACRA,IAAI,CAACc,MAAM,CAACM,GAAD,CAAP,CADI,GAERpB,IAAI,CAACA,IAAL,CAAUc,MAAM,CAACM,GAAD,CAAhB,CAFJ;AAGA,cAAMG,IAAI,GAAGF,OAAO,CAACG,UAAR,IAAsB,CAACV,MAAM,CAACM,GAAD,CAAN,CAAYlB,QAAZ,GAAuBE,MAAxB,GAAiC,CAApE;;AACA,YAAI,CAACkB,GAAD,IAAQ,CAACC,IAAb,EAAmB;AACjBP,UAAAA,OAAO,GAAG,IAAV;AACAD,UAAAA,MAAM,CAACK,GAAD,CAAN,GAAcf,KAAd;AACD;AACF;AACF;AACF,GAlBD;AAmBA,SAAO;AAAEW,IAAAA,OAAF;AAAWD,IAAAA;AAAX,GAAP;AACD,CAvBM","sourcesContent":["\nexport const tests = {\n  input: {\n    test: x => x && x.toString().replace(/\\s/g, '').length > 0,\n    error: 'Please enter a valid input',\n  },\n  number: {\n    test: /^\\d+$/,\n    error: 'Please enter number',\n  },\n  password: {\n    test: x => x && x.toString().replace(/\\s/g, '').length > 9,\n    error: 'Please enter a valid password',\n  },\n  email: {\n    test: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n    error: 'Please enter a valid email address',\n  },\n  name: {\n    test: /^[a-z]+([a-z- ',.-]?)+[a-z.]+$/i,\n    error: 'Please enter a valid name',\n  },\n  address: {\n    test: x => x && x.replace(/\\s/g, '').length > 1,\n    error: 'Please enter a valid address',\n  },\n  phone: {\n    test: /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/,\n    error: 'Please enter a valid phone number',\n  },\n  website: {\n    test: /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/,\n    error: 'Please enter a valid url',\n  },\n}\n\nexport const validate = (values, tests) => {\n  const errors = {}\n  let isError = false\n  Object.keys(values).forEach((key) => {\n    if (tests[key]) {\n      const {\n        test,\n        error,\n        options = {},\n      } = tests[key]\n      if (test && error) {\n        const res = typeof test === 'function'\n          ? test(values[key])\n          : test.test(values[key])\n        const skip = options.ifNotEmpty && !values[key].toString().length > 0\n        if (!res && !skip) {\n          isError = true\n          errors[key] = error\n        }\n      }\n    }\n  })\n  return { isError, errors }\n}\n"]},"metadata":{},"sourceType":"module"}