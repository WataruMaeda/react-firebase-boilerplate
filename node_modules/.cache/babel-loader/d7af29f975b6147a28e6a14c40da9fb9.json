{"ast":null,"code":"import _defineProperty from \"/Users/wmaeda/Documents/me/Web/react-firebase-boilerplate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Connects a component to the redux store and dispatch functions\n * Proposition: one import to take care of accessing store and actions\n *\n * Provides access to state + actions by rendering children as function\n *\n * Usage:\n * ```\n * <Connector>\n *  {\n *    ({ state, actions }) => {\n *      // state and actions are organized as\n *      // state.someModule.foo, actions.someModule.actions, etc\n *      // do something with state, actions\n *    }\n *  }\n * </Connector>\n * ```\n *\n * To Add Actions:\n * - import actions\n * - add to the `actionList` with a label and value\n */\nimport { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actions as appActions } from '../modules/app.module';\n\nclass Connector extends Component {\n  render() {\n    const _this$props = this.props,\n          state = _this$props.state,\n          actions = _this$props.actions,\n          children = _this$props.children;\n    return children({\n      state,\n      actions\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  state\n});\n\nconst mapDispatchToProps = dispatch => {\n  const actionList = [// label: String, value: Object\n  {\n    label: 'app',\n    value: appActions\n  } // add more actions here\n  ];\n  return {\n    actions: actionList.reduce((prev, cur) => _objectSpread({}, prev, {\n      [cur.label]: bindActionCreators(cur.value, dispatch)\n    }), {})\n  };\n};\n\nConnector.propTypes = {\n  state: PropTypes.any.isRequired,\n  actions: PropTypes.any.isRequired,\n  children: PropTypes.any.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Connector);","map":{"version":3,"sources":["/Users/wmaeda/Documents/me/Web/react-firebase-boilerplate/src/utils/connector.js"],"names":["Component","PropTypes","connect","bindActionCreators","actions","appActions","Connector","render","props","state","children","mapStateToProps","mapDispatchToProps","dispatch","actionList","label","value","reduce","prev","cur","propTypes","any","isRequired"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAO,IAAIC,UAApB,QAAsC,uBAAtC;;AAEA,MAAMC,SAAN,SAAwBN,SAAxB,CAAkC;AAChCO,EAAAA,MAAM,GAAG;AAAA,wBAC8B,KAAKC,KADnC;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQL,OADR,eACQA,OADR;AAAA,UACiBM,QADjB,eACiBA,QADjB;AAGP,WAAOA,QAAQ,CAAC;AAAED,MAAAA,KAAF;AAASL,MAAAA;AAAT,KAAD,CAAf;AACD;;AAL+B;;AAQlC,MAAMO,eAAe,GAAGF,KAAK,KAAK;AAAEA,EAAAA;AAAF,CAAL,CAA7B;;AACA,MAAMG,kBAAkB,GAAIC,QAAD,IAAc;AACvC,QAAMC,UAAU,GAAG,CACjB;AACA;AAAEC,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,KAAK,EAAEX;AAAvB,GAFiB,CAGjB;AAHiB,GAAnB;AAMA,SAAO;AACLD,IAAAA,OAAO,EAAEU,UAAU,CAACG,MAAX,CAAkB,CAACC,IAAD,EAAOC,GAAP,uBACtBD,IADsB;AAEzB,OAACC,GAAG,CAACJ,KAAL,GAAaZ,kBAAkB,CAACgB,GAAG,CAACH,KAAL,EAAYH,QAAZ;AAFN,MAAlB,EAGL,EAHK;AADJ,GAAP;AAMD,CAbD;;AAeAP,SAAS,CAACc,SAAV,GAAsB;AACpBX,EAAAA,KAAK,EAAER,SAAS,CAACoB,GAAV,CAAcC,UADD;AAEpBlB,EAAAA,OAAO,EAAEH,SAAS,CAACoB,GAAV,CAAcC,UAFH;AAGpBZ,EAAAA,QAAQ,EAAET,SAAS,CAACoB,GAAV,CAAcC;AAHJ,CAAtB;AAMA,eAAepB,OAAO,CAACS,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CN,SAA7C,CAAf","sourcesContent":["/**\n * Connects a component to the redux store and dispatch functions\n * Proposition: one import to take care of accessing store and actions\n *\n * Provides access to state + actions by rendering children as function\n *\n * Usage:\n * ```\n * <Connector>\n *  {\n *    ({ state, actions }) => {\n *      // state and actions are organized as\n *      // state.someModule.foo, actions.someModule.actions, etc\n *      // do something with state, actions\n *    }\n *  }\n * </Connector>\n * ```\n *\n * To Add Actions:\n * - import actions\n * - add to the `actionList` with a label and value\n */\nimport { Component } from 'react'\nimport { PropTypes } from 'prop-types'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { actions as appActions } from '../modules/app.module'\n\nclass Connector extends Component {\n  render() {\n    const { state, actions, children } = this.props\n\n    return children({ state, actions })\n  }\n}\n\nconst mapStateToProps = state => ({ state })\nconst mapDispatchToProps = (dispatch) => {\n  const actionList = [\n    // label: String, value: Object\n    { label: 'app', value: appActions },\n    // add more actions here\n  ]\n\n  return {\n    actions: actionList.reduce((prev, cur) => ({\n      ...prev,\n      [cur.label]: bindActionCreators(cur.value, dispatch),\n    }), {}),\n  }\n}\n\nConnector.propTypes = {\n  state: PropTypes.any.isRequired,\n  actions: PropTypes.any.isRequired,\n  children: PropTypes.any.isRequired,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Connector)\n"]},"metadata":{},"sourceType":"module"}